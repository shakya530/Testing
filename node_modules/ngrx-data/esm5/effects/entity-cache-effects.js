/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { asyncScheduler, Observable, of, merge, race } from 'rxjs';
import { concatMap, catchError, delay, filter, map, mergeMap } from 'rxjs/operators';
import { DataServiceError } from '../dataservices/data-service-error';
import { excludeEmptyChangeSetItems } from '../actions/entity-cache-change-set';
import { EntityActionFactory } from '../actions/entity-action-factory';
import { EntityOp } from '../actions/entity-op';
import { EntityCacheAction, SaveEntitiesCanceled, SaveEntitiesError, SaveEntitiesSuccess } from '../actions/entity-cache-action';
import { EntityCacheDataService } from '../dataservices/entity-cache-data.service';
import { ENTITY_EFFECTS_SCHEDULER } from './entity-effects-scheduler';
import { Logger } from '../utils/interfaces';
var EntityCacheEffects = /** @class */ (function () {
    function EntityCacheEffects(actions, dataService, entityActionFactory, logger, /**
         * Injecting an optional Scheduler that will be undefined
         * in normal application usage, but its injected here so that you can mock out
         * during testing using the RxJS TestScheduler for simulating passages of time.
         */
    scheduler) {
        var _this = this;
        this.actions = actions;
        this.dataService = dataService;
        this.entityActionFactory = entityActionFactory;
        this.logger = logger;
        this.scheduler = scheduler;
        /**
         * Delay for error and skip observables. Must be multiple of 10 for marble testing.
         */
        this.responseDelay = 10;
        /**
         * Observable of SAVE_ENTITIES_CANCEL actions with non-null correlation ids
         */
        this.saveEntitiesCancel$ = this.actions.pipe(ofType(EntityCacheAction.SAVE_ENTITIES_CANCEL), filter(function (a) { return a.payload.correlationId != null; }));
        this.saveEntities$ = this.actions.pipe(ofType(EntityCacheAction.SAVE_ENTITIES), mergeMap(function (action) { return _this.saveEntities(action); }));
    }
    /**
     * Perform the requested SaveEntities actions and return a scalar Observable<Action>
     * that the effect should dispatch to the store after the server responds.
     * @param action The SaveEntities action
     */
    /**
     * Perform the requested SaveEntities actions and return a scalar Observable<Action>
     * that the effect should dispatch to the store after the server responds.
     * @param {?} action The SaveEntities action
     * @return {?}
     */
    EntityCacheEffects.prototype.saveEntities = /**
     * Perform the requested SaveEntities actions and return a scalar Observable<Action>
     * that the effect should dispatch to the store after the server responds.
     * @param {?} action The SaveEntities action
     * @return {?}
     */
    function (action) {
        var _this = this;
        /** @type {?} */
        var error = action.payload.error;
        if (error) {
            return this.handleSaveEntitiesError$(action)(error);
        }
        try {
            /** @type {?} */
            var changeSet = excludeEmptyChangeSetItems(action.payload.changeSet);
            var _a = action.payload, correlationId_1 = _a.correlationId, mergeStrategy = _a.mergeStrategy, tag = _a.tag, url = _a.url;
            /** @type {?} */
            var options = { correlationId: correlationId_1, mergeStrategy: mergeStrategy, tag: tag };
            if (changeSet.changes.length === 0) {
                // nothing to save
                return of(new SaveEntitiesSuccess(changeSet, url, options));
            }
            /** @type {?} */
            var c = this.saveEntitiesCancel$.pipe(filter(function (a) { return correlationId_1 === a.payload.correlationId; }), map(function (a) { return new SaveEntitiesCanceled(correlationId_1, a.payload.reason, a.payload.tag); }));
            /** @type {?} */
            var d = this.dataService
                .saveEntities(changeSet, url)
                .pipe(concatMap(function (result) {
                return _this.handleSaveEntitiesSuccess$(action, _this.entityActionFactory)(result);
            }), catchError(this.handleSaveEntitiesError$(action)));
            // Emit which ever gets there first; the other observable is terminated.
            return race(c, d);
        }
        catch (err) {
            return this.handleSaveEntitiesError$(action)(err);
        }
    };
    /**
     * return handler of error result of saveEntities, returning a scalar observable of error action
     * @param {?} action
     * @return {?}
     */
    EntityCacheEffects.prototype.handleSaveEntitiesError$ = /**
     * return handler of error result of saveEntities, returning a scalar observable of error action
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        // Although error may return immediately,
        // ensure observable takes some time,
        // as app likely assumes asynchronous response.
        return function (err) {
            /** @type {?} */
            var error = err instanceof DataServiceError ? err : new DataServiceError(err, null);
            return of(new SaveEntitiesError(error, action)).pipe(delay(_this.responseDelay, _this.scheduler || asyncScheduler));
        };
    };
    /**
     * return handler of the ChangeSet result of successful saveEntities()
     * @param {?} action
     * @param {?} entityActionFactory
     * @return {?}
     */
    EntityCacheEffects.prototype.handleSaveEntitiesSuccess$ = /**
     * return handler of the ChangeSet result of successful saveEntities()
     * @param {?} action
     * @param {?} entityActionFactory
     * @return {?}
     */
    function (action, entityActionFactory) {
        var _a = action.payload, url = _a.url, correlationId = _a.correlationId, mergeStrategy = _a.mergeStrategy, tag = _a.tag;
        /** @type {?} */
        var options = { correlationId: correlationId, mergeStrategy: mergeStrategy, tag: tag };
        return function (changeSet) {
            // DataService returned a ChangeSet with possible updates to the saved entities
            if (changeSet) {
                return of(new SaveEntitiesSuccess(changeSet, url, options));
            }
            // No ChangeSet = Server probably responded '204 - No Content' because
            // it made no changes to the inserted/updated entities.
            // Respond with success action best on the ChangeSet in the request.
            changeSet = action.payload.changeSet;
            // If pessimistic save, return success action with the original ChangeSet
            if (!action.payload.isOptimistic) {
                return of(new SaveEntitiesSuccess(changeSet, url, options));
            }
            /** @type {?} */
            var entityNames = changeSet.changes.reduce(function (acc, item) { return (acc.indexOf(item.entityName) === -1 ? acc.concat(item.entityName) : acc); }, /** @type {?} */ ([]));
            return merge(entityNames.map(function (name) { return entityActionFactory.create(name, EntityOp.SET_LOADING, false); }));
        };
    };
    EntityCacheEffects.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EntityCacheEffects.ctorParameters = function () { return [
        { type: Actions },
        { type: EntityCacheDataService },
        { type: EntityActionFactory },
        { type: Logger },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENTITY_EFFECTS_SCHEDULER,] }] }
    ]; };
    tslib_1.__decorate([
        Effect({ dispatch: false }),
        tslib_1.__metadata("design:type", Observable)
    ], EntityCacheEffects.prototype, "saveEntitiesCancel$", void 0);
    tslib_1.__decorate([
        Effect()
        // Concurrent persistence requests considered unsafe.
        // `mergeMap` allows for concurrent requests which may return in any order
        ,
        tslib_1.__metadata("design:type", Observable)
    ], EntityCacheEffects.prototype, "saveEntities$", void 0);
    return EntityCacheEffects;
}());
export { EntityCacheEffects };
if (false) {
    /**
     * Delay for error and skip observables. Must be multiple of 10 for marble testing.
     * @type {?}
     */
    EntityCacheEffects.prototype.responseDelay;
    /**
     * Observable of SAVE_ENTITIES_CANCEL actions with non-null correlation ids
     * @type {?}
     */
    EntityCacheEffects.prototype.saveEntitiesCancel$;
    /** @type {?} */
    EntityCacheEffects.prototype.saveEntities$;
    /** @type {?} */
    EntityCacheEffects.prototype.actions;
    /** @type {?} */
    EntityCacheEffects.prototype.dataService;
    /** @type {?} */
    EntityCacheEffects.prototype.entityActionFactory;
    /** @type {?} */
    EntityCacheEffects.prototype.logger;
    /**
     * Injecting an optional Scheduler that will be undefined
     * in normal application usage, but its injected here so that you can mock out
     * during testing using the RxJS TestScheduler for simulating passages of time.
     * @type {?}
     */
    EntityCacheEffects.prototype.scheduler;
}

//# sourceMappingURL=data:application/json;base64,