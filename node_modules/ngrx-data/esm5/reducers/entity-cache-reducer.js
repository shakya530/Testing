/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { EntityCacheAction } from '../actions/entity-cache-action';
import { ChangeSetOperation } from '../actions/entity-cache-change-set';
import { EntityCollectionCreator } from './entity-collection-creator';
import { EntityCollectionReducerRegistry } from './entity-collection-reducer-registry';
import { EntityOp } from '../actions/entity-op';
import { Logger } from '../utils/interfaces';
import { MergeStrategy } from '../actions/merge-strategy';
/**
 * Creates the EntityCacheReducer via its create() method
 */
var EntityCacheReducerFactory = /** @class */ (function () {
    function EntityCacheReducerFactory(entityCollectionCreator, entityCollectionReducerRegistry, logger) {
        this.entityCollectionCreator = entityCollectionCreator;
        this.entityCollectionReducerRegistry = entityCollectionReducerRegistry;
        this.logger = logger;
    }
    /**
     * Create the ngrx-data entity cache reducer which either responds to entity cache level actions
     * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.
     */
    /**
     * Create the ngrx-data entity cache reducer which either responds to entity cache level actions
     * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.create = /**
     * Create the ngrx-data entity cache reducer which either responds to entity cache level actions
     * or (more commonly) delegates to an EntityCollectionReducer based on the action.payload.entityName.
     * @return {?}
     */
    function () {
        // This technique ensures a named function appears in the debugger
        return entityCacheReducer.bind(this);
        /**
         * @this {?}
         * @param {?=} entityCache
         * @param {?=} action
         * @return {?}
         */
        function entityCacheReducer(entityCache, action) {
            if (entityCache === void 0) { entityCache = {}; }
            // EntityCache actions
            switch (action.type) {
                case EntityCacheAction.CLEAR_COLLECTIONS: {
                    return this.clearCollectionsReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.LOAD_COLLECTIONS: {
                    return this.loadCollectionsReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.MERGE_QUERY_SET: {
                    return this.mergeQuerySetReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.SAVE_ENTITIES: {
                    return this.saveEntitiesReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.SAVE_ENTITIES_CANCEL: {
                    return this.saveEntitiesCancelReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.SAVE_ENTITIES_ERROR: {
                    return this.saveEntitiesErrorReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.SAVE_ENTITIES_SUCCESS: {
                    return this.saveEntitiesSuccessReducer(entityCache, /** @type {?} */ (action));
                }
                case EntityCacheAction.SET_ENTITY_CACHE: {
                    // Completely replace the EntityCache. Be careful!
                    return action.payload.cache;
                }
            }
            /** @type {?} */
            var payload = action.payload;
            if (payload && payload.entityName && payload.entityOp && !payload.error) {
                return this.applyCollectionReducer(entityCache, /** @type {?} */ (action));
            }
            // Not a valid EntityAction
            return entityCache;
        }
    };
    /**
     * Reducer to clear multiple collections at the same time.
     * @param entityCache the entity cache
     * @param action a ClearCollections action whose payload is an array of collection names.
     * If empty array, does nothing. If no array, clears all the collections.
     */
    /**
     * Reducer to clear multiple collections at the same time.
     * @param {?} entityCache the entity cache
     * @param {?} action a ClearCollections action whose payload is an array of collection names.
     * If empty array, does nothing. If no array, clears all the collections.
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.clearCollectionsReducer = /**
     * Reducer to clear multiple collections at the same time.
     * @param {?} entityCache the entity cache
     * @param {?} action a ClearCollections action whose payload is an array of collection names.
     * If empty array, does nothing. If no array, clears all the collections.
     * @return {?}
     */
    function (entityCache, action) {
        var _this = this;
        var _a = action.payload, collections = _a.collections, tag = _a.tag;
        /** @type {?} */
        var entityOp = EntityOp.REMOVE_ALL;
        if (!collections) {
            // Collections is not defined. Clear all collections.
            collections = Object.keys(entityCache);
        }
        entityCache = collections.reduce(function (newCache, entityName) {
            /** @type {?} */
            var payload = { entityName: entityName, entityOp: entityOp };
            /** @type {?} */
            var act = { type: "[" + entityName + "] " + action.type, payload: payload };
            newCache = _this.applyCollectionReducer(newCache, act);
            return newCache;
        }, entityCache);
        return entityCache;
    };
    /**
     * Reducer to load collection in the form of a hash of entity data for multiple collections.
     * @param entityCache the entity cache
     * @param action a LoadCollections action whose payload is the QuerySet of entity collections to load
     */
    /**
     * Reducer to load collection in the form of a hash of entity data for multiple collections.
     * @param {?} entityCache the entity cache
     * @param {?} action a LoadCollections action whose payload is the QuerySet of entity collections to load
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.loadCollectionsReducer = /**
     * Reducer to load collection in the form of a hash of entity data for multiple collections.
     * @param {?} entityCache the entity cache
     * @param {?} action a LoadCollections action whose payload is the QuerySet of entity collections to load
     * @return {?}
     */
    function (entityCache, action) {
        var _this = this;
        var _a = action.payload, collections = _a.collections, tag = _a.tag;
        /** @type {?} */
        var entityOp = EntityOp.ADD_ALL;
        /** @type {?} */
        var entityNames = Object.keys(collections);
        entityCache = entityNames.reduce(function (newCache, entityName) {
            /** @type {?} */
            var payload = {
                entityName: entityName,
                entityOp: entityOp,
                data: collections[entityName]
            };
            /** @type {?} */
            var act = { type: "[" + entityName + "] " + action.type, payload: payload };
            newCache = _this.applyCollectionReducer(newCache, act);
            return newCache;
        }, entityCache);
        return entityCache;
    };
    /**
     * Reducer to merge query sets in the form of a hash of entity data for multiple collections.
     * @param entityCache the entity cache
     * @param action a MergeQuerySet action with the query set and a MergeStrategy
     */
    /**
     * Reducer to merge query sets in the form of a hash of entity data for multiple collections.
     * @param {?} entityCache the entity cache
     * @param {?} action a MergeQuerySet action with the query set and a MergeStrategy
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.mergeQuerySetReducer = /**
     * Reducer to merge query sets in the form of a hash of entity data for multiple collections.
     * @param {?} entityCache the entity cache
     * @param {?} action a MergeQuerySet action with the query set and a MergeStrategy
     * @return {?}
     */
    function (entityCache, action) {
        var _this = this;
        var _a = action.payload, mergeStrategy = _a.mergeStrategy, querySet = _a.querySet, tag = _a.tag;
        mergeStrategy = mergeStrategy === null ? MergeStrategy.PreserveChanges : mergeStrategy;
        /** @type {?} */
        var entityOp = EntityOp.UPSERT_MANY;
        /** @type {?} */
        var entityNames = Object.keys(querySet);
        entityCache = entityNames.reduce(function (newCache, entityName) {
            /** @type {?} */
            var payload = {
                entityName: entityName,
                entityOp: entityOp,
                data: querySet[entityName],
                mergeStrategy: mergeStrategy
            };
            /** @type {?} */
            var act = { type: "[" + entityName + "] " + action.type, payload: payload };
            newCache = _this.applyCollectionReducer(newCache, act);
            return newCache;
        }, entityCache);
        return entityCache;
    };
    // #region saveEntities reducers
    /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.saveEntitiesReducer = /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    function (entityCache, action) {
        var _this = this;
        var _a = action.payload, changeSet = _a.changeSet, correlationId = _a.correlationId, isOptimistic = _a.isOptimistic, mergeStrategy = _a.mergeStrategy, tag = _a.tag;
        try {
            changeSet.changes.forEach(function (item) {
                /** @type {?} */
                var entityName = item.entityName;
                /** @type {?} */
                var payload = {
                    entityName: entityName,
                    entityOp: getEntityOp(item),
                    data: item.entities,
                    correlationId: correlationId,
                    isOptimistic: isOptimistic,
                    mergeStrategy: mergeStrategy,
                    tag: tag
                };
                /** @type {?} */
                var act = { type: "[" + entityName + "] " + action.type, payload: payload };
                entityCache = _this.applyCollectionReducer(entityCache, act);
                if (act.payload.error) {
                    throw act.payload.error;
                }
            });
        }
        catch (error) {
            action.payload.error = error;
        }
        return entityCache;
        /**
         * @param {?} item
         * @return {?}
         */
        function getEntityOp(item) {
            switch (item.op) {
                case ChangeSetOperation.Add:
                    return EntityOp.SAVE_ADD_MANY;
                case ChangeSetOperation.Delete:
                    return EntityOp.SAVE_DELETE_MANY;
                case ChangeSetOperation.Update:
                    return EntityOp.SAVE_UPDATE_MANY;
                case ChangeSetOperation.Upsert:
                    return EntityOp.SAVE_UPSERT_MANY;
            }
        }
    };
    /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.saveEntitiesCancelReducer = /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    function (entityCache, action) {
        // This implementation can only clear the loading flag for the collections involved
        // If the save was optimistic, you'll have to compensate to fix the cache as you think necessary
        return this.clearLoadingFlags(entityCache, action.payload.entityNames || []);
    };
    /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.saveEntitiesErrorReducer = /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    function (entityCache, action) {
        /** @type {?} */
        var originalAction = action.payload.originalAction;
        /** @type {?} */
        var originalChangeSet = originalAction.payload.changeSet;
        /** @type {?} */
        var entityNames = originalChangeSet.changes.map(function (item) { return item.entityName; });
        return this.clearLoadingFlags(entityCache, entityNames);
    };
    /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.saveEntitiesSuccessReducer = /**
     * @param {?} entityCache
     * @param {?} action
     * @return {?}
     */
    function (entityCache, action) {
        var _this = this;
        var _a = action.payload, changeSet = _a.changeSet, correlationId = _a.correlationId, isOptimistic = _a.isOptimistic, mergeStrategy = _a.mergeStrategy, tag = _a.tag;
        changeSet.changes.forEach(function (item) {
            /** @type {?} */
            var entityName = item.entityName;
            /** @type {?} */
            var payload = {
                entityName: entityName,
                entityOp: getEntityOp(item),
                data: item.entities,
                correlationId: correlationId,
                isOptimistic: isOptimistic,
                mergeStrategy: mergeStrategy,
                tag: tag
            };
            /** @type {?} */
            var act = { type: "[" + entityName + "] " + action.type, payload: payload };
            entityCache = _this.applyCollectionReducer(entityCache, act);
        });
        return entityCache;
        /**
         * @param {?} item
         * @return {?}
         */
        function getEntityOp(item) {
            switch (item.op) {
                case ChangeSetOperation.Add:
                    return EntityOp.SAVE_ADD_MANY_SUCCESS;
                case ChangeSetOperation.Delete:
                    return EntityOp.SAVE_DELETE_MANY_SUCCESS;
                case ChangeSetOperation.Update:
                    return EntityOp.SAVE_UPDATE_MANY_SUCCESS;
                case ChangeSetOperation.Upsert:
                    return EntityOp.SAVE_UPSERT_MANY_SUCCESS;
            }
        }
    };
    /**
     * Apply reducer for the action's EntityCollection (if the action targets a collection)
     * @param {?=} cache
     * @param {?=} action
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.applyCollectionReducer = /**
     * Apply reducer for the action's EntityCollection (if the action targets a collection)
     * @param {?=} cache
     * @param {?=} action
     * @return {?}
     */
    function (cache, action) {
        if (cache === void 0) { cache = {}; }
        /** @type {?} */
        var entityName = action.payload.entityName;
        /** @type {?} */
        var collection = cache[entityName];
        /** @type {?} */
        var reducer = this.entityCollectionReducerRegistry.getOrCreateReducer(entityName);
        /** @type {?} */
        var newCollection;
        try {
            newCollection = collection ? reducer(collection, action) : reducer(this.entityCollectionCreator.create(entityName), action);
        }
        catch (error) {
            this.logger.error(error);
            action.payload.error = error;
        }
        return action.payload.error || collection === newCollection ? cache : tslib_1.__assign({}, cache, (_a = {}, _a[entityName] = newCollection, _a));
        var _a;
    };
    /**
     * Ensure loading is false for every collection in entityNames
     * @param {?} entityCache
     * @param {?} entityNames
     * @return {?}
     */
    EntityCacheReducerFactory.prototype.clearLoadingFlags = /**
     * Ensure loading is false for every collection in entityNames
     * @param {?} entityCache
     * @param {?} entityNames
     * @return {?}
     */
    function (entityCache, entityNames) {
        /** @type {?} */
        var isMutated = false;
        entityNames.forEach(function (entityName) {
            /** @type {?} */
            var collection = entityCache[entityName];
            if (collection.loading) {
                if (!isMutated) {
                    entityCache = tslib_1.__assign({}, entityCache);
                    isMutated = true;
                }
                entityCache[entityName] = tslib_1.__assign({}, collection, { loading: false });
            }
        });
        return entityCache;
    };
    EntityCacheReducerFactory.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EntityCacheReducerFactory.ctorParameters = function () { return [
        { type: EntityCollectionCreator },
        { type: EntityCollectionReducerRegistry },
        { type: Logger }
    ]; };
    return EntityCacheReducerFactory;
}());
export { EntityCacheReducerFactory };
if (false) {
    /** @type {?} */
    EntityCacheReducerFactory.prototype.entityCollectionCreator;
    /** @type {?} */
    EntityCacheReducerFactory.prototype.entityCollectionReducerRegistry;
    /** @type {?} */
    EntityCacheReducerFactory.prototype.logger;
}

//# sourceMappingURL=data:application/json;base64,