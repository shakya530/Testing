/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {number} */
var ChangeType = {
    /** The entity has not changed from its last known server state. */
    Unchanged: 0,
    /** The entity was added to the collection */
    Added: 1,
    /** The entity is scheduled for delete and was removed from the collection */
    Deleted: 2,
    /** The entity in the collection was updated */
    Updated: 3,
};
export { ChangeType };
ChangeType[ChangeType.Unchanged] = 'Unchanged';
ChangeType[ChangeType.Added] = 'Added';
ChangeType[ChangeType.Deleted] = 'Deleted';
ChangeType[ChangeType.Updated] = 'Updated';
/**
 * Change state for an entity with unsaved changes;
 * an entry in an EntityCollection.changeState map
 * @record
 * @template T
 */
export function ChangeState() { }
/** @type {?} */
ChangeState.prototype.changeType;
/** @type {?|undefined} */
ChangeState.prototype.originalValue;
/** @typedef {?} */
var ChangeStateMap;
export { ChangeStateMap };
/**
 * Data and information about a collection of entities of a single type.
 * EntityCollections are maintained in the EntityCache within the ngrx store.
 * @record
 * @template T
 */
export function EntityCollection() { }
/**
 * Name of the entity type for this collection
 * @type {?}
 */
EntityCollection.prototype.entityName;
/**
 * A map of ChangeStates, keyed by id, for entities with unsaved changes
 * @type {?}
 */
EntityCollection.prototype.changeState;
/**
 * The user's current collection filter pattern
 * @type {?}
 */
EntityCollection.prototype.filter;
/**
 * true if collection was ever filled by QueryAll; forced false if cleared
 * @type {?}
 */
EntityCollection.prototype.loaded;
/**
 * true when a query or save operation is in progress
 * @type {?}
 */
EntityCollection.prototype.loading;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWNvbGxlY3Rpb24uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWRhdGEvIiwic291cmNlcyI6WyJyZWR1Y2Vycy9lbnRpdHktY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0lBTUUsWUFBYTs7SUFFYixRQUFLOztJQUVMLFVBQU87O0lBRVAsVUFBTzs7O3NCQU5QLFNBQVM7c0JBRVQsS0FBSztzQkFFTCxPQUFPO3NCQUVQLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlTdGF0ZSB9IGZyb20gJ0BuZ3J4L2VudGl0eSc7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSAnLi4vdXRpbHMvbmdyeC1lbnRpdHktbW9kZWxzJztcblxuLyoqIFR5cGVzIG9mIGNoYW5nZSBpbiBhIENoYW5nZVN0YXRlIGluc3RhbmNlICovXG5leHBvcnQgZW51bSBDaGFuZ2VUeXBlIHtcbiAgLyoqIFRoZSBlbnRpdHkgaGFzIG5vdCBjaGFuZ2VkIGZyb20gaXRzIGxhc3Qga25vd24gc2VydmVyIHN0YXRlLiAqL1xuICBVbmNoYW5nZWQgPSAwLFxuICAvKiogVGhlIGVudGl0eSB3YXMgYWRkZWQgdG8gdGhlIGNvbGxlY3Rpb24gKi9cbiAgQWRkZWQsXG4gIC8qKiBUaGUgZW50aXR5IGlzIHNjaGVkdWxlZCBmb3IgZGVsZXRlIGFuZCB3YXMgcmVtb3ZlZCBmcm9tIHRoZSBjb2xsZWN0aW9uICovXG4gIERlbGV0ZWQsXG4gIC8qKiBUaGUgZW50aXR5IGluIHRoZSBjb2xsZWN0aW9uIHdhcyB1cGRhdGVkICovXG4gIFVwZGF0ZWRcbn1cblxuLyoqXG4gKiBDaGFuZ2Ugc3RhdGUgZm9yIGFuIGVudGl0eSB3aXRoIHVuc2F2ZWQgY2hhbmdlcztcbiAqIGFuIGVudHJ5IGluIGFuIEVudGl0eUNvbGxlY3Rpb24uY2hhbmdlU3RhdGUgbWFwXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2hhbmdlU3RhdGU8VD4ge1xuICBjaGFuZ2VUeXBlOiBDaGFuZ2VUeXBlO1xuICBvcmlnaW5hbFZhbHVlPzogVCB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBNYXAgb2YgZW50aXR5IHByaW1hcnkga2V5cyB0byBlbnRpdHkgQ2hhbmdlU3RhdGVzLlxuICogRWFjaCBlbnRyeSByZXByZXNlbnRzIGFuIGVudGl0eSB3aXRoIHVuc2F2ZWQgY2hhbmdlcy5cbiAqL1xuZXhwb3J0IHR5cGUgQ2hhbmdlU3RhdGVNYXA8VD4gPSBEaWN0aW9uYXJ5PENoYW5nZVN0YXRlPFQ+PjtcblxuLyoqXG4gKiBEYXRhIGFuZCBpbmZvcm1hdGlvbiBhYm91dCBhIGNvbGxlY3Rpb24gb2YgZW50aXRpZXMgb2YgYSBzaW5nbGUgdHlwZS5cbiAqIEVudGl0eUNvbGxlY3Rpb25zIGFyZSBtYWludGFpbmVkIGluIHRoZSBFbnRpdHlDYWNoZSB3aXRoaW4gdGhlIG5ncnggc3RvcmUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5Q29sbGVjdGlvbjxUID0gYW55PiBleHRlbmRzIEVudGl0eVN0YXRlPFQ+IHtcbiAgLyoqIE5hbWUgb2YgdGhlIGVudGl0eSB0eXBlIGZvciB0aGlzIGNvbGxlY3Rpb24gKi9cbiAgZW50aXR5TmFtZTogc3RyaW5nO1xuICAvKiogQSBtYXAgb2YgQ2hhbmdlU3RhdGVzLCBrZXllZCBieSBpZCwgZm9yIGVudGl0aWVzIHdpdGggdW5zYXZlZCBjaGFuZ2VzICovXG4gIGNoYW5nZVN0YXRlOiBDaGFuZ2VTdGF0ZU1hcDxUPjtcbiAgLyoqIFRoZSB1c2VyJ3MgY3VycmVudCBjb2xsZWN0aW9uIGZpbHRlciBwYXR0ZXJuICovXG4gIGZpbHRlcjogc3RyaW5nO1xuICAvKiogdHJ1ZSBpZiBjb2xsZWN0aW9uIHdhcyBldmVyIGZpbGxlZCBieSBRdWVyeUFsbDsgZm9yY2VkIGZhbHNlIGlmIGNsZWFyZWQgKi9cbiAgbG9hZGVkOiBib29sZWFuO1xuICAvKiogdHJ1ZSB3aGVuIGEgcXVlcnkgb3Igc2F2ZSBvcGVyYXRpb24gaXMgaW4gcHJvZ3Jlc3MgKi9cbiAgbG9hZGluZzogYm9vbGVhbjtcbn1cbiJdfQ==