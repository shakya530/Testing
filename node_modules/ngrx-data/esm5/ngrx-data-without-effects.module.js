/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule, Inject, Injector, InjectionToken, Optional } from '@angular/core';
import { combineReducers, ReducerManager, StoreModule } from '@ngrx/store';
import { CorrelationIdGenerator } from './utils/correlation-id-generator';
import { EntityDispatcherDefaultOptions } from './dispatchers/entity-dispatcher-default-options';
import { EntityActionFactory } from './actions/entity-action-factory';
import { EntityCacheDispatcher } from './dispatchers/entity-cache-dispatcher';
import { entityCacheSelectorProvider } from './selectors/entity-cache-selector';
import { EntityCollectionServiceElementsFactory } from './entity-services/entity-collection-service-elements-factory';
import { EntityCollectionServiceFactory } from './entity-services/entity-collection-service-factory';
import { EntityServices } from './entity-services/entity-services';
import { EntityCollectionCreator } from './reducers/entity-collection-creator';
import { EntityCollectionReducerFactory } from './reducers/entity-collection-reducer';
import { EntityCollectionReducerMethodsFactory } from './reducers/entity-collection-reducer-methods';
import { EntityCollectionReducerRegistry } from './reducers/entity-collection-reducer-registry';
import { EntityDispatcherFactory } from './dispatchers/entity-dispatcher-factory';
import { EntityDefinitionService } from './entity-metadata/entity-definition.service';
import { EntityCacheReducerFactory } from './reducers/entity-cache-reducer';
import { ENTITY_CACHE_NAME, ENTITY_CACHE_NAME_TOKEN, ENTITY_CACHE_META_REDUCERS, ENTITY_COLLECTION_META_REDUCERS, INITIAL_ENTITY_CACHE_STATE } from './reducers/constants';
import { DefaultLogger } from './utils/default-logger';
import { EntitySelectorsFactory } from './selectors/entity-selectors';
import { EntitySelectors$Factory } from './selectors/entity-selectors$';
import { EntityServicesBase } from './entity-services/entity-services-base';
import { EntityServicesElements } from './entity-services/entity-services-elements';
import { Logger, PLURAL_NAMES_TOKEN } from './utils/interfaces';
/**
 * @record
 */
export function NgrxDataModuleConfig() { }
/** @type {?|undefined} */
NgrxDataModuleConfig.prototype.entityMetadata;
/** @type {?|undefined} */
NgrxDataModuleConfig.prototype.entityCacheMetaReducers;
/** @type {?|undefined} */
NgrxDataModuleConfig.prototype.entityCollectionMetaReducers;
/** @type {?|undefined} */
NgrxDataModuleConfig.prototype.initialEntityCacheState;
/** @type {?|undefined} */
NgrxDataModuleConfig.prototype.pluralNames;
var ɵ0 = ENTITY_CACHE_NAME;
/**
 * Module without effects or dataservices which means no HTTP calls
 * This module helpful for internal testing.
 * Also helpful for apps that handle server access on their own and
 * therefore opt-out of \@ngrx/effects for entities
 */
var NgrxDataModuleWithoutEffects = /** @class */ (function () {
    function NgrxDataModuleWithoutEffects(reducerManager, entityCacheReducerFactory, injector, 
    // optional params
    entityCacheName, initialState, metaReducers) {
        this.reducerManager = reducerManager;
        this.injector = injector;
        this.entityCacheName = entityCacheName;
        this.initialState = initialState;
        this.metaReducers = metaReducers;
        /** @type {?} */
        var key = entityCacheName || ENTITY_CACHE_NAME;
        initialState = typeof initialState === 'function' ? initialState() : initialState;
        /** @type {?} */
        var reducers = (metaReducers || []).map(function (mr) {
            return mr instanceof InjectionToken ? injector.get(mr) : mr;
        });
        this.entityCacheFeature = {
            key: key,
            reducers: entityCacheReducerFactory.create(),
            reducerFactory: combineReducers,
            initialState: initialState || {},
            metaReducers: reducers
        };
        reducerManager.addFeature(this.entityCacheFeature);
    }
    /**
     * @param {?} config
     * @return {?}
     */
    NgrxDataModuleWithoutEffects.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: NgrxDataModuleWithoutEffects,
            providers: [
                {
                    provide: ENTITY_CACHE_META_REDUCERS,
                    useValue: config.entityCacheMetaReducers ? config.entityCacheMetaReducers : []
                },
                {
                    provide: ENTITY_COLLECTION_META_REDUCERS,
                    useValue: config.entityCollectionMetaReducers ? config.entityCollectionMetaReducers : []
                },
                {
                    provide: PLURAL_NAMES_TOKEN,
                    multi: true,
                    useValue: config.pluralNames ? config.pluralNames : {}
                }
            ]
        };
    };
    /**
     * @return {?}
     */
    NgrxDataModuleWithoutEffects.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.reducerManager.removeFeature(this.entityCacheFeature);
    };
    NgrxDataModuleWithoutEffects.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        StoreModule
                    ],
                    providers: [
                        CorrelationIdGenerator,
                        EntityDispatcherDefaultOptions,
                        EntityActionFactory,
                        EntityCacheDispatcher,
                        EntityCacheReducerFactory,
                        entityCacheSelectorProvider,
                        EntityCollectionCreator,
                        EntityCollectionReducerFactory,
                        EntityCollectionReducerMethodsFactory,
                        EntityCollectionReducerRegistry,
                        EntityCollectionServiceElementsFactory,
                        EntityCollectionServiceFactory,
                        EntityDefinitionService,
                        EntityDispatcherFactory,
                        EntitySelectorsFactory,
                        EntitySelectors$Factory,
                        EntityServicesElements,
                        { provide: ENTITY_CACHE_NAME_TOKEN, useValue: ɵ0 },
                        { provide: EntityServices, useClass: EntityServicesBase },
                        { provide: Logger, useClass: DefaultLogger }
                    ]
                },] },
    ];
    /** @nocollapse */
    NgrxDataModuleWithoutEffects.ctorParameters = function () { return [
        { type: ReducerManager },
        { type: EntityCacheReducerFactory },
        { type: Injector },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ENTITY_CACHE_NAME_TOKEN,] }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [INITIAL_ENTITY_CACHE_STATE,] }] },
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [ENTITY_CACHE_META_REDUCERS,] }] }
    ]; };
    return NgrxDataModuleWithoutEffects;
}());
export { NgrxDataModuleWithoutEffects };
if (false) {
    /** @type {?} */
    NgrxDataModuleWithoutEffects.prototype.entityCacheFeature;
    /** @type {?} */
    NgrxDataModuleWithoutEffects.prototype.reducerManager;
    /** @type {?} */
    NgrxDataModuleWithoutEffects.prototype.injector;
    /** @type {?} */
    NgrxDataModuleWithoutEffects.prototype.entityCacheName;
    /** @type {?} */
    NgrxDataModuleWithoutEffects.prototype.initialState;
    /** @type {?} */
    NgrxDataModuleWithoutEffects.prototype.metaReducers;
}
export { ɵ0 };

//# sourceMappingURL=data:application/json;base64,