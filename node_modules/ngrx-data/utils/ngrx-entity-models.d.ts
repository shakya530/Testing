export declare type ComparerStr<T> = (a: T, b: T) => string;
export declare type ComparerNum<T> = (a: T, b: T) => number;
export declare type Comparer<T> = ComparerNum<T> | ComparerStr<T>;
export declare type IdSelectorStr<T> = (model: Partial<T>) => string;
export declare type IdSelectorNum<T> = (model: Partial<T>) => number;
export declare type IdSelector<T> = IdSelectorStr<T> | IdSelectorNum<T>;
export interface DictionaryNum<T> {
    [id: number]: T;
}
export declare abstract class Dictionary<T> implements DictionaryNum<T> {
    [id: string]: T;
}
export interface UpdateStr<T> {
    id: string;
    changes: Partial<T>;
}
export interface UpdateNum<T> {
    id: number;
    changes: Partial<T>;
}
/** Update entity data for an Update action */
export declare type Update<T> = UpdateStr<T> | UpdateNum<T>;
