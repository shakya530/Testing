/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { createSelector } from '@ngrx/store';
import { ENTITY_CACHE_SELECTOR_TOKEN, createEntityCacheSelector } from './entity-cache-selector';
import { ENTITY_CACHE_NAME } from '../reducers/constants';
import { EntityCollectionCreator } from '../reducers/entity-collection-creator';
/**
 * The selector functions for entity collection members,
 * Selects from the entity collection to the collection member
 * Contrast with {EntitySelectors}.
 * @record
 * @template T
 */
export function CollectionSelectors() { }
/* TODO: handle strange member:
readonly [selector: string]: any;
*/
/**
 * Count of entities in the cached collection.
 * @type {?}
 */
CollectionSelectors.prototype.selectCount;
/**
 * All entities in the cached collection.
 * @type {?}
 */
CollectionSelectors.prototype.selectEntities;
/**
 * Map of entity keys to entities
 * @type {?}
 */
CollectionSelectors.prototype.selectEntityMap;
/**
 * Filter pattern applied by the entity collection's filter function
 * @type {?}
 */
CollectionSelectors.prototype.selectFilter;
/**
 * Entities in the cached collection that pass the filter function
 * @type {?}
 */
CollectionSelectors.prototype.selectFilteredEntities;
/**
 * Keys of the cached collection, in the collection's native sort order
 * @type {?}
 */
CollectionSelectors.prototype.selectKeys;
/**
 * True when the collection has been fully loaded.
 * @type {?}
 */
CollectionSelectors.prototype.selectLoaded;
/**
 * True when a multi-entity query command is in progress.
 * @type {?}
 */
CollectionSelectors.prototype.selectLoading;
/**
 * ChangeState (including original values) of entities with unsaved changes
 * @type {?}
 */
CollectionSelectors.prototype.selectChangeState;
/**
 * The selector functions for entity collection members,
 * Selects from store root, through EntityCache, to the entity collection member
 * Contrast with {CollectionSelectors}.
 * @record
 * @template T
 */
export function EntitySelectors() { }
/**
 * Name of the entity collection for these selectors
 * @type {?}
 */
EntitySelectors.prototype.entityName;
/* TODO: handle strange member:
readonly [name: string]: MemoizedSelector<EntityCollection<T>, any> | string;
*/
/**
 * The cached EntityCollection itself
 * @type {?}
 */
EntitySelectors.prototype.selectCollection;
/**
 * Count of entities in the cached collection.
 * @type {?}
 */
EntitySelectors.prototype.selectCount;
/**
 * All entities in the cached collection.
 * @type {?}
 */
EntitySelectors.prototype.selectEntities;
/**
 * The EntityCache
 * @type {?}
 */
EntitySelectors.prototype.selectEntityCache;
/**
 * Map of entity keys to entities
 * @type {?}
 */
EntitySelectors.prototype.selectEntityMap;
/**
 * Filter pattern applied by the entity collection's filter function
 * @type {?}
 */
EntitySelectors.prototype.selectFilter;
/**
 * Entities in the cached collection that pass the filter function
 * @type {?}
 */
EntitySelectors.prototype.selectFilteredEntities;
/**
 * Keys of the cached collection, in the collection's native sort order
 * @type {?}
 */
EntitySelectors.prototype.selectKeys;
/**
 * True when the collection has been fully loaded.
 * @type {?}
 */
EntitySelectors.prototype.selectLoaded;
/**
 * True when a multi-entity query command is in progress.
 * @type {?}
 */
EntitySelectors.prototype.selectLoading;
/**
 * ChangeState (including original values) of entities with unsaved changes
 * @type {?}
 */
EntitySelectors.prototype.selectChangeState;
/**
 * Creates EntitySelector functions for entity collections.
 */
var EntitySelectorsFactory = /** @class */ (function () {
    function EntitySelectorsFactory(entityCollectionCreator, selectEntityCache) {
        this.entityCollectionCreator = entityCollectionCreator;
        this.selectEntityCache = selectEntityCache;
        this.entityCollectionCreator = entityCollectionCreator || new EntityCollectionCreator();
        this.selectEntityCache = selectEntityCache || createEntityCacheSelector(ENTITY_CACHE_NAME);
    }
    /**
     * Create the NgRx selector from the store root to the named collection,
     * e.g. from Object to Heroes.
     * @param entityName the name of the collection
     */
    /**
     * Create the NgRx selector from the store root to the named collection,
     * e.g. from Object to Heroes.
     * @template T, C
     * @param {?} entityName the name of the collection
     * @return {?}
     */
    EntitySelectorsFactory.prototype.createCollectionSelector = /**
     * Create the NgRx selector from the store root to the named collection,
     * e.g. from Object to Heroes.
     * @template T, C
     * @param {?} entityName the name of the collection
     * @return {?}
     */
    function (entityName) {
        var _this = this;
        /** @type {?} */
        var getCollection = function (cache) {
            if (cache === void 0) { cache = {}; }
            return ((cache[entityName] || _this.entityCollectionCreator.create(entityName)));
        };
        return createSelector(this.selectEntityCache, getCollection);
    };
    // createCollectionSelectors implementation
    /**
     * @template T, S
     * @param {?} metadataOrName
     * @return {?}
     */
    EntitySelectorsFactory.prototype.createCollectionSelectors = /**
     * @template T, S
     * @param {?} metadataOrName
     * @return {?}
     */
    function (metadataOrName) {
        /** @type {?} */
        var metadata = typeof metadataOrName === 'string' ? { entityName: metadataOrName } : metadataOrName;
        /** @type {?} */
        var selectKeys = function (c) { return c.ids; };
        /** @type {?} */
        var selectEntityMap = function (c) { return c.entities; };
        /** @type {?} */
        var selectEntities = createSelector(selectKeys, selectEntityMap, function (keys, entities) { return keys.map(function (key) { return (entities[key]); }); });
        /** @type {?} */
        var selectCount = createSelector(selectKeys, function (keys) { return keys.length; });
        /** @type {?} */
        var selectFilter = function (c) { return c.filter; };
        /** @type {?} */
        var filterFn = metadata.filterFn;
        /** @type {?} */
        var selectFilteredEntities = filterFn
            ? createSelector(selectEntities, selectFilter, function (entities, pattern) { return filterFn(entities, pattern); })
            : selectEntities;
        /** @type {?} */
        var selectLoaded = function (c) { return c.loaded; };
        /** @type {?} */
        var selectLoading = function (c) { return c.loading; };
        /** @type {?} */
        var selectChangeState = function (c) { return c.changeState; };
        /** @type {?} */
        var extra = metadata.additionalCollectionState || {};
        /** @type {?} */
        var extraSelectors = {};
        Object.keys(extra).forEach(function (k) {
            extraSelectors['select' + k[0].toUpperCase() + k.slice(1)] = function (c) { return (/** @type {?} */ (c))[k]; };
        });
        return /** @type {?} */ (tslib_1.__assign({ selectCount: selectCount,
            selectEntities: selectEntities,
            selectEntityMap: selectEntityMap,
            selectFilter: selectFilter,
            selectFilteredEntities: selectFilteredEntities,
            selectKeys: selectKeys,
            selectLoaded: selectLoaded,
            selectLoading: selectLoading,
            selectChangeState: selectChangeState }, extraSelectors));
    };
    // createCollectionSelectors implementation
    /**
     * @template T, S
     * @param {?} metadataOrName
     * @return {?}
     */
    EntitySelectorsFactory.prototype.create = /**
     * @template T, S
     * @param {?} metadataOrName
     * @return {?}
     */
    function (metadataOrName) {
        /** @type {?} */
        var metadata = typeof metadataOrName === 'string' ? { entityName: metadataOrName } : metadataOrName;
        /** @type {?} */
        var entityName = metadata.entityName;
        /** @type {?} */
        var selectCollection = this.createCollectionSelector(entityName);
        /** @type {?} */
        var collectionSelectors = this.createCollectionSelectors(metadata);
        /** @type {?} */
        var entitySelectors = {};
        Object.keys(collectionSelectors).forEach(function (k) {
            entitySelectors[k] = createSelector(selectCollection, collectionSelectors[k]);
        });
        return /** @type {?} */ (tslib_1.__assign({ entityName: entityName,
            selectCollection: selectCollection, selectEntityCache: this.selectEntityCache }, entitySelectors));
    };
    EntitySelectorsFactory.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    EntitySelectorsFactory.ctorParameters = function () { return [
        { type: EntityCollectionCreator, decorators: [{ type: Optional }] },
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [ENTITY_CACHE_SELECTOR_TOKEN,] }] }
    ]; };
    return EntitySelectorsFactory;
}());
export { EntitySelectorsFactory };
if (false) {
    /** @type {?} */
    EntitySelectorsFactory.prototype.entityCollectionCreator;
    /** @type {?} */
    EntitySelectorsFactory.prototype.selectEntityCache;
}

//# sourceMappingURL=data:application/json;base64,