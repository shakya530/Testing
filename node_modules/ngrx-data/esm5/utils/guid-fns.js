/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/*
Client-side id-generators

These GUID utility functions are not used by ngrx-data itself at this time.
They are included as candidates for generating persistable correlation ids if that becomes desirable.
They are also safe for generating unique entity ids on the client.

Note they produce 32-character hexadecimal UUID strings,
not the 128-bit representation found in server-side languages and databases.

These utilities are experimental and may be withdrawn or replaced in future.
*/
/**
 * Creates a Universally Unique Identifier (AKA GUID)
 * @return {?}
 */
export function getUuid() {
    // The original implementation is based on this SO answer:
    // http://stackoverflow.com/a/2117523/200253
    return 'xxxxxxxxxx4xxyxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        /** @type {?} */
        var r = (Math.random() * 16) | 0;
        /** @type {?} */
        var 
        // tslint:disable-next-line:no-bitwise
        v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    });
}
/**
 * Alias for getUuid(). Compare with getGuidComb().
 * @return {?}
 */
export function getGuid() {
    return getUuid();
}
/**
 * Creates a sortable, pseudo-GUID (globally unique identifier)
 * whose trailing 6 bytes (12 hex digits) are time-based
 * Start either with the given getTime() value, seedTime,
 * or get the current time in ms.
 *
 * @param {?=} seed {number} - optional seed for reproducible time-part
 * @return {?}
 */
export function getGuidComb(seed) {
    /** @type {?} */
    var timePart = ('00' + (seed || new Date().getTime()).toString(16)).slice(-12);
    return ('xxxxxxxxxx4xxyxxx'.replace(/[xy]/g, function (c) {
        /** @type {?} */
        var r = (Math.random() * 16) | 0;
        /** @type {?} */
        var v = c === 'x' ? r : (r & 0x3) | 0x8;
        return v.toString(16);
    }) + timePart);
}
/**
 * @param {?} l
 * @param {?} r
 * @return {?}
 */
export function guidComparer(l, r) {
    /** @type {?} */
    var l_low = l.slice(-12);
    /** @type {?} */
    var r_low = r.slice(-12);
    return l_low !== r_low ? (l_low < r_low ? -1 : +(l_low !== r_low)) : l < r ? -1 : +(l !== r);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZC1mbnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWRhdGEvIiwic291cmNlcyI6WyJ1dGlscy9ndWlkLWZucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSxNQUFNOzs7SUFHSixNQUFNLENBQUMsOEJBQThCLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxVQUFTLENBQUM7O1FBRS9ELElBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FFSTs7UUFGdEM7O1FBRUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ3RDLE1BQU0sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3ZCLENBQUMsQ0FBQztDQUNKOzs7OztBQUdELE1BQU07SUFDSixNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7Q0FDbEI7Ozs7Ozs7Ozs7QUFVRCxNQUFNLHNCQUFzQixJQUFhOztJQVd2QyxJQUFNLFFBQVEsR0FBRyxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakYsTUFBTSxDQUFDLENBQ0wsbUJBQW1CLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxVQUFTLENBQUM7O1FBRTdDLElBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FDSTs7UUFEdEMsSUFDRSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7UUFDdEMsTUFBTSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDdkIsQ0FBQyxHQUFHLFFBQVEsQ0FDZCxDQUFDO0NBQ0g7Ozs7OztBQUdELE1BQU0sdUJBQXVCLENBQVMsRUFBRSxDQUFTOztJQUMvQyxJQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7O0lBQzNCLElBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUMzQixNQUFNLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztDQUM5RiIsInNvdXJjZXNDb250ZW50IjpbIi8qXG5DbGllbnQtc2lkZSBpZC1nZW5lcmF0b3JzXG5cblRoZXNlIEdVSUQgdXRpbGl0eSBmdW5jdGlvbnMgYXJlIG5vdCB1c2VkIGJ5IG5ncngtZGF0YSBpdHNlbGYgYXQgdGhpcyB0aW1lLlxuVGhleSBhcmUgaW5jbHVkZWQgYXMgY2FuZGlkYXRlcyBmb3IgZ2VuZXJhdGluZyBwZXJzaXN0YWJsZSBjb3JyZWxhdGlvbiBpZHMgaWYgdGhhdCBiZWNvbWVzIGRlc2lyYWJsZS5cblRoZXkgYXJlIGFsc28gc2FmZSBmb3IgZ2VuZXJhdGluZyB1bmlxdWUgZW50aXR5IGlkcyBvbiB0aGUgY2xpZW50LlxuXG5Ob3RlIHRoZXkgcHJvZHVjZSAzMi1jaGFyYWN0ZXIgaGV4YWRlY2ltYWwgVVVJRCBzdHJpbmdzLFxubm90IHRoZSAxMjgtYml0IHJlcHJlc2VudGF0aW9uIGZvdW5kIGluIHNlcnZlci1zaWRlIGxhbmd1YWdlcyBhbmQgZGF0YWJhc2VzLlxuXG5UaGVzZSB1dGlsaXRpZXMgYXJlIGV4cGVyaW1lbnRhbCBhbmQgbWF5IGJlIHdpdGhkcmF3biBvciByZXBsYWNlZCBpbiBmdXR1cmUuXG4qL1xuXG4vKipcbiAqIENyZWF0ZXMgYSBVbml2ZXJzYWxseSBVbmlxdWUgSWRlbnRpZmllciAoQUtBIEdVSUQpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVdWlkKCkge1xuICAvLyBUaGUgb3JpZ2luYWwgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgb24gdGhpcyBTTyBhbnN3ZXI6XG4gIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIxMTc1MjMvMjAwMjUzXG4gIHJldHVybiAneHh4eHh4eHh4eDR4eHl4eHh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbihjKSB7XG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICBjb25zdCByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWJpdHdpc2VcbiAgICAgIHYgPSBjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgfSk7XG59XG5cbi8qKiBBbGlhcyBmb3IgZ2V0VXVpZCgpLiBDb21wYXJlIHdpdGggZ2V0R3VpZENvbWIoKS4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHdWlkKCkge1xuICByZXR1cm4gZ2V0VXVpZCgpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBzb3J0YWJsZSwgcHNldWRvLUdVSUQgKGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyKVxuICogd2hvc2UgdHJhaWxpbmcgNiBieXRlcyAoMTIgaGV4IGRpZ2l0cykgYXJlIHRpbWUtYmFzZWRcbiAqIFN0YXJ0IGVpdGhlciB3aXRoIHRoZSBnaXZlbiBnZXRUaW1lKCkgdmFsdWUsIHNlZWRUaW1lLFxuICogb3IgZ2V0IHRoZSBjdXJyZW50IHRpbWUgaW4gbXMuXG4gKlxuICogQHBhcmFtIHNlZWQge251bWJlcn0gLSBvcHRpb25hbCBzZWVkIGZvciByZXByb2R1Y2libGUgdGltZS1wYXJ0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRHdWlkQ29tYihzZWVkPzogbnVtYmVyKSB7XG4gIC8vIEVhY2ggbmV3IEd1aWQgaXMgZ3JlYXRlciB0aGFuIG5leHQgaWYgbW9yZSB0aGFuIDFtcyBwYXNzZXNcbiAgLy8gU2VlIGh0dHA6Ly90aGF0ZXh0cmFtaWxlLmJlL2Jsb2cvMjAwOS8wNS91c2luZy10aGUtZ3VpZGNvbWItaWRlbnRpZmllci1zdHJhdGVneVxuICAvLyBCYXNlZCBvbiBicmVlemUuY29yZS5nZXRVdWlkIHdoaWNoIGlzIGJhc2VkIG9uIHRoaXMgU3RhY2tPdmVyZmxvdyBhbnN3ZXJcbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjExNzUyMy8yMDAyNTNcbiAgLy9cbiAgLy8gQ29udmVydCB0aW1lIHZhbHVlIHRvIGhleDogbi50b1N0cmluZygxNilcbiAgLy8gTWFrZSBzdXJlIGl0IGlzIDYgYnl0ZXMgbG9uZzogKCcwMCcrIC4uLikuc2xpY2UoLTEyKSAuLi4gZnJvbSB0aGUgcmVhclxuICAvLyBSZXBsYWNlIExBU1QgNiBieXRlcyAoMTIgaGV4IGRpZ2l0cykgb2YgcmVndWxhciBHdWlkICh0aGF0J3Mgd2hlcmUgdGhleSBzb3J0IGluIGEgRGIpXG4gIC8vXG4gIC8vIFBsYXkgd2l0aCB0aGlzIGluIGpzRmlkZGxlOiBodHRwOi8vanNmaWRkbGUubmV0L3dhcmRiZWxsL3FTOGFOL1xuICBjb25zdCB0aW1lUGFydCA9ICgnMDAnICsgKHNlZWQgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCkpLnRvU3RyaW5nKDE2KSkuc2xpY2UoLTEyKTtcbiAgcmV0dXJuIChcbiAgICAneHh4eHh4eHh4eDR4eHl4eHgnLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24oYykge1xuICAgICAgLy8gdHNsaW50OmRpc2FibGU6bm8tYml0d2lzZVxuICAgICAgY29uc3QgciA9IChNYXRoLnJhbmRvbSgpICogMTYpIHwgMCxcbiAgICAgICAgdiA9IGMgPT09ICd4JyA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSkgKyB0aW1lUGFydFxuICApO1xufVxuXG4vLyBTb3J0IGNvbXBhcmlzb24gdmFsdWUgdGhhdCdzIGdvb2QgZW5vdWdoXG5leHBvcnQgZnVuY3Rpb24gZ3VpZENvbXBhcmVyKGw6IHN0cmluZywgcjogc3RyaW5nKSB7XG4gIGNvbnN0IGxfbG93ID0gbC5zbGljZSgtMTIpO1xuICBjb25zdCByX2xvdyA9IHIuc2xpY2UoLTEyKTtcbiAgcmV0dXJuIGxfbG93ICE9PSByX2xvdyA/IChsX2xvdyA8IHJfbG93ID8gLTEgOiArKGxfbG93ICE9PSByX2xvdykpIDogbCA8IHIgPyAtMSA6ICsobCAhPT0gcik7XG59XG4iXX0=