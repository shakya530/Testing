/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
// Ensure that these suffix values and the EntityOp suffixes match
// Cannot do that programmatically.
/** @enum {string} */
const EntityOp = {
    // Persistance operations
    CANCEL_PERSIST: 'ngrx-data/cancel-persist',
    CANCELED_PERSIST: 'ngrx-data/canceled-persist',
    QUERY_ALL: 'ngrx-data/query-all',
    QUERY_ALL_SUCCESS: 'ngrx-data/query-all/success',
    QUERY_ALL_ERROR: 'ngrx-data/query-all/error',
    QUERY_LOAD: 'ngrx-data/query-load',
    QUERY_LOAD_SUCCESS: 'ngrx-data/query-load/success',
    QUERY_LOAD_ERROR: 'ngrx-data/query-load/error',
    QUERY_MANY: 'ngrx-data/query-many',
    QUERY_MANY_SUCCESS: 'ngrx-data/query-many/success',
    QUERY_MANY_ERROR: 'ngrx-data/query-many/error',
    QUERY_BY_KEY: 'ngrx-data/query-by-key',
    QUERY_BY_KEY_SUCCESS: 'ngrx-data/query-by-key/success',
    QUERY_BY_KEY_ERROR: 'ngrx-data/query-by-key/error',
    SAVE_ADD_MANY: 'ngrx-data/save/add-many',
    SAVE_ADD_MANY_ERROR: 'ngrx-data/save/add-many/error',
    SAVE_ADD_MANY_SUCCESS: 'ngrx-data/save/add-many/success',
    SAVE_ADD_ONE: 'ngrx-data/save/add-one',
    SAVE_ADD_ONE_ERROR: 'ngrx-data/save/add-one/error',
    SAVE_ADD_ONE_SUCCESS: 'ngrx-data/save/add-one/success',
    SAVE_DELETE_MANY: 'ngrx-data/save/delete-many',
    SAVE_DELETE_MANY_SUCCESS: 'ngrx-data/save/delete-many/success',
    SAVE_DELETE_MANY_ERROR: 'ngrx-data/save/delete-many/error',
    SAVE_DELETE_ONE: 'ngrx-data/save/delete-one',
    SAVE_DELETE_ONE_SUCCESS: 'ngrx-data/save/delete-one/success',
    SAVE_DELETE_ONE_ERROR: 'ngrx-data/save/delete-one/error',
    SAVE_UPDATE_MANY: 'ngrx-data/save/update-many',
    SAVE_UPDATE_MANY_SUCCESS: 'ngrx-data/save/update-many/success',
    SAVE_UPDATE_MANY_ERROR: 'ngrx-data/save/update-many/error',
    SAVE_UPDATE_ONE: 'ngrx-data/save/update-one',
    SAVE_UPDATE_ONE_SUCCESS: 'ngrx-data/save/update-one/success',
    SAVE_UPDATE_ONE_ERROR: 'ngrx-data/save/update-one/error',
    // Use only if the server supports upsert;
    SAVE_UPSERT_MANY: 'ngrx-data/save/upsert-many',
    SAVE_UPSERT_MANY_SUCCESS: 'ngrx-data/save/upsert-many/success',
    SAVE_UPSERT_MANY_ERROR: 'ngrx-data/save/upsert-many/error',
    // Use only if the server supports upsert;
    SAVE_UPSERT_ONE: 'ngrx-data/save/upsert-one',
    SAVE_UPSERT_ONE_SUCCESS: 'ngrx-data/save/upsert-one/success',
    SAVE_UPSERT_ONE_ERROR: 'ngrx-data/save/upsert-one/error',
    // Cache operations
    ADD_ALL: 'ngrx-data/add-all',
    ADD_MANY: 'ngrx-data/add-many',
    ADD_ONE: 'ngrx-data/add-one',
    REMOVE_ALL: 'ngrx-data/remove-all',
    REMOVE_MANY: 'ngrx-data/remove-many',
    REMOVE_ONE: 'ngrx-data/remove-one',
    UPDATE_MANY: 'ngrx-data/update-many',
    UPDATE_ONE: 'ngrx-data/update-one',
    UPSERT_MANY: 'ngrx-data/upsert-many',
    UPSERT_ONE: 'ngrx-data/upsert-one',
    COMMIT_ALL: 'ngrx-data/commit-all',
    COMMIT_MANY: 'ngrx-data/commit-many',
    COMMIT_ONE: 'ngrx-data/commit-one',
    UNDO_ALL: 'ngrx-data/undo-all',
    UNDO_MANY: 'ngrx-data/undo-many',
    UNDO_ONE: 'ngrx-data/undo-one',
    SET_CHANGE_STATE: 'ngrx-data/set-change-state',
    SET_COLLECTION: 'ngrx-data/set-collection',
    SET_FILTER: 'ngrx-data/set-filter',
    SET_LOADED: 'ngrx-data/set-loaded',
    SET_LOADING: 'ngrx-data/set-loading',
};
export { EntityOp };
/** *
 * "Success" suffix appended to EntityOps that are successful.
  @type {?} */
export const OP_SUCCESS = '/success';
/** *
 * "Error" suffix appended to EntityOps that have failed.
  @type {?} */
export const OP_ERROR = '/error';
/**
 * Make the error EntityOp corresponding to the given EntityOp
 * @param {?} op
 * @return {?}
 */
export function makeErrorOp(op) {
    return /** @type {?} */ ((op + OP_ERROR));
}
/**
 * Make the success EntityOp corresponding to the given EntityOp
 * @param {?} op
 * @return {?}
 */
export function makeSuccessOp(op) {
    return /** @type {?} */ ((op + OP_SUCCESS));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LW9wLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1kYXRhLyIsInNvdXJjZXMiOlsiYWN0aW9ucy9lbnRpdHktb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0lBTUUsZ0JBQWlCLDBCQUEwQjtJQUMzQyxrQkFBbUIsNEJBQTRCO0lBRS9DLFdBQVkscUJBQXFCO0lBQ2pDLG1CQUFvQiw2QkFBNkI7SUFDakQsaUJBQWtCLDJCQUEyQjtJQUU3QyxZQUFhLHNCQUFzQjtJQUNuQyxvQkFBcUIsOEJBQThCO0lBQ25ELGtCQUFtQiw0QkFBNEI7SUFFL0MsWUFBYSxzQkFBc0I7SUFDbkMsb0JBQXFCLDhCQUE4QjtJQUNuRCxrQkFBbUIsNEJBQTRCO0lBRS9DLGNBQWUsd0JBQXdCO0lBQ3ZDLHNCQUF1QixnQ0FBZ0M7SUFDdkQsb0JBQXFCLDhCQUE4QjtJQUVuRCxlQUFnQix5QkFBeUI7SUFDekMscUJBQXNCLCtCQUErQjtJQUNyRCx1QkFBd0IsaUNBQWlDO0lBRXpELGNBQWUsd0JBQXdCO0lBQ3ZDLG9CQUFxQiw4QkFBOEI7SUFDbkQsc0JBQXVCLGdDQUFnQztJQUV2RCxrQkFBbUIsNEJBQTRCO0lBQy9DLDBCQUEyQixvQ0FBb0M7SUFDL0Qsd0JBQXlCLGtDQUFrQztJQUUzRCxpQkFBa0IsMkJBQTJCO0lBQzdDLHlCQUEwQixtQ0FBbUM7SUFDN0QsdUJBQXdCLGlDQUFpQztJQUV6RCxrQkFBbUIsNEJBQTRCO0lBQy9DLDBCQUEyQixvQ0FBb0M7SUFDL0Qsd0JBQXlCLGtDQUFrQztJQUUzRCxpQkFBa0IsMkJBQTJCO0lBQzdDLHlCQUEwQixtQ0FBbUM7SUFDN0QsdUJBQXdCLGlDQUFpQzs7SUFHekQsa0JBQW1CLDRCQUE0QjtJQUMvQywwQkFBMkIsb0NBQW9DO0lBQy9ELHdCQUF5QixrQ0FBa0M7O0lBRzNELGlCQUFrQiwyQkFBMkI7SUFDN0MseUJBQTBCLG1DQUFtQztJQUM3RCx1QkFBd0IsaUNBQWlDOztJQUd6RCxTQUFVLG1CQUFtQjtJQUM3QixVQUFXLG9CQUFvQjtJQUMvQixTQUFVLG1CQUFtQjtJQUM3QixZQUFhLHNCQUFzQjtJQUNuQyxhQUFjLHVCQUF1QjtJQUNyQyxZQUFhLHNCQUFzQjtJQUNuQyxhQUFjLHVCQUF1QjtJQUNyQyxZQUFhLHNCQUFzQjtJQUNuQyxhQUFjLHVCQUF1QjtJQUNyQyxZQUFhLHNCQUFzQjtJQUVuQyxZQUFhLHNCQUFzQjtJQUNuQyxhQUFjLHVCQUF1QjtJQUNyQyxZQUFhLHNCQUFzQjtJQUNuQyxVQUFXLG9CQUFvQjtJQUMvQixXQUFZLHFCQUFxQjtJQUNqQyxVQUFXLG9CQUFvQjtJQUUvQixrQkFBbUIsNEJBQTRCO0lBQy9DLGdCQUFpQiwwQkFBMEI7SUFDM0MsWUFBYSxzQkFBc0I7SUFDbkMsWUFBYSxzQkFBc0I7SUFDbkMsYUFBYyx1QkFBdUI7Ozs7OztBQUl2QyxhQUFhLFVBQVUsR0FBRyxVQUFVLENBQUM7Ozs7QUFHckMsYUFBYSxRQUFRLEdBQUcsUUFBUSxDQUFDOzs7Ozs7QUFHakMsTUFBTSxzQkFBc0IsRUFBWTtJQUN0QyxNQUFNLG1CQUFXLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFDO0NBQ2xDOzs7Ozs7QUFHRCxNQUFNLHdCQUF3QixFQUFZO0lBQ3hDLE1BQU0sbUJBQVcsQ0FBQyxFQUFFLEdBQUcsVUFBVSxDQUFDLEVBQUM7Q0FDcEMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBFbnN1cmUgdGhhdCB0aGVzZSBzdWZmaXggdmFsdWVzIGFuZCB0aGUgRW50aXR5T3Agc3VmZml4ZXMgbWF0Y2hcbi8vIENhbm5vdCBkbyB0aGF0IHByb2dyYW1tYXRpY2FsbHkuXG5cbi8qKiBHZW5lcmFsIHB1cnBvc2UgZW50aXR5IGFjdGlvbiBvcGVyYXRpb25zLCBnb29kIGZvciBhbnkgZW50aXR5IHR5cGUgKi9cbmV4cG9ydCBlbnVtIEVudGl0eU9wIHtcbiAgLy8gUGVyc2lzdGFuY2Ugb3BlcmF0aW9uc1xuICBDQU5DRUxfUEVSU0lTVCA9ICduZ3J4LWRhdGEvY2FuY2VsLXBlcnNpc3QnLFxuICBDQU5DRUxFRF9QRVJTSVNUID0gJ25ncngtZGF0YS9jYW5jZWxlZC1wZXJzaXN0JyxcblxuICBRVUVSWV9BTEwgPSAnbmdyeC1kYXRhL3F1ZXJ5LWFsbCcsXG4gIFFVRVJZX0FMTF9TVUNDRVNTID0gJ25ncngtZGF0YS9xdWVyeS1hbGwvc3VjY2VzcycsXG4gIFFVRVJZX0FMTF9FUlJPUiA9ICduZ3J4LWRhdGEvcXVlcnktYWxsL2Vycm9yJyxcblxuICBRVUVSWV9MT0FEID0gJ25ncngtZGF0YS9xdWVyeS1sb2FkJyxcbiAgUVVFUllfTE9BRF9TVUNDRVNTID0gJ25ncngtZGF0YS9xdWVyeS1sb2FkL3N1Y2Nlc3MnLFxuICBRVUVSWV9MT0FEX0VSUk9SID0gJ25ncngtZGF0YS9xdWVyeS1sb2FkL2Vycm9yJyxcblxuICBRVUVSWV9NQU5ZID0gJ25ncngtZGF0YS9xdWVyeS1tYW55JyxcbiAgUVVFUllfTUFOWV9TVUNDRVNTID0gJ25ncngtZGF0YS9xdWVyeS1tYW55L3N1Y2Nlc3MnLFxuICBRVUVSWV9NQU5ZX0VSUk9SID0gJ25ncngtZGF0YS9xdWVyeS1tYW55L2Vycm9yJyxcblxuICBRVUVSWV9CWV9LRVkgPSAnbmdyeC1kYXRhL3F1ZXJ5LWJ5LWtleScsXG4gIFFVRVJZX0JZX0tFWV9TVUNDRVNTID0gJ25ncngtZGF0YS9xdWVyeS1ieS1rZXkvc3VjY2VzcycsXG4gIFFVRVJZX0JZX0tFWV9FUlJPUiA9ICduZ3J4LWRhdGEvcXVlcnktYnkta2V5L2Vycm9yJyxcblxuICBTQVZFX0FERF9NQU5ZID0gJ25ncngtZGF0YS9zYXZlL2FkZC1tYW55JyxcbiAgU0FWRV9BRERfTUFOWV9FUlJPUiA9ICduZ3J4LWRhdGEvc2F2ZS9hZGQtbWFueS9lcnJvcicsXG4gIFNBVkVfQUREX01BTllfU1VDQ0VTUyA9ICduZ3J4LWRhdGEvc2F2ZS9hZGQtbWFueS9zdWNjZXNzJyxcblxuICBTQVZFX0FERF9PTkUgPSAnbmdyeC1kYXRhL3NhdmUvYWRkLW9uZScsXG4gIFNBVkVfQUREX09ORV9FUlJPUiA9ICduZ3J4LWRhdGEvc2F2ZS9hZGQtb25lL2Vycm9yJyxcbiAgU0FWRV9BRERfT05FX1NVQ0NFU1MgPSAnbmdyeC1kYXRhL3NhdmUvYWRkLW9uZS9zdWNjZXNzJyxcblxuICBTQVZFX0RFTEVURV9NQU5ZID0gJ25ncngtZGF0YS9zYXZlL2RlbGV0ZS1tYW55JyxcbiAgU0FWRV9ERUxFVEVfTUFOWV9TVUNDRVNTID0gJ25ncngtZGF0YS9zYXZlL2RlbGV0ZS1tYW55L3N1Y2Nlc3MnLFxuICBTQVZFX0RFTEVURV9NQU5ZX0VSUk9SID0gJ25ncngtZGF0YS9zYXZlL2RlbGV0ZS1tYW55L2Vycm9yJyxcblxuICBTQVZFX0RFTEVURV9PTkUgPSAnbmdyeC1kYXRhL3NhdmUvZGVsZXRlLW9uZScsXG4gIFNBVkVfREVMRVRFX09ORV9TVUNDRVNTID0gJ25ncngtZGF0YS9zYXZlL2RlbGV0ZS1vbmUvc3VjY2VzcycsXG4gIFNBVkVfREVMRVRFX09ORV9FUlJPUiA9ICduZ3J4LWRhdGEvc2F2ZS9kZWxldGUtb25lL2Vycm9yJyxcblxuICBTQVZFX1VQREFURV9NQU5ZID0gJ25ncngtZGF0YS9zYXZlL3VwZGF0ZS1tYW55JyxcbiAgU0FWRV9VUERBVEVfTUFOWV9TVUNDRVNTID0gJ25ncngtZGF0YS9zYXZlL3VwZGF0ZS1tYW55L3N1Y2Nlc3MnLFxuICBTQVZFX1VQREFURV9NQU5ZX0VSUk9SID0gJ25ncngtZGF0YS9zYXZlL3VwZGF0ZS1tYW55L2Vycm9yJyxcblxuICBTQVZFX1VQREFURV9PTkUgPSAnbmdyeC1kYXRhL3NhdmUvdXBkYXRlLW9uZScsXG4gIFNBVkVfVVBEQVRFX09ORV9TVUNDRVNTID0gJ25ncngtZGF0YS9zYXZlL3VwZGF0ZS1vbmUvc3VjY2VzcycsXG4gIFNBVkVfVVBEQVRFX09ORV9FUlJPUiA9ICduZ3J4LWRhdGEvc2F2ZS91cGRhdGUtb25lL2Vycm9yJyxcblxuICAvLyBVc2Ugb25seSBpZiB0aGUgc2VydmVyIHN1cHBvcnRzIHVwc2VydDtcbiAgU0FWRV9VUFNFUlRfTUFOWSA9ICduZ3J4LWRhdGEvc2F2ZS91cHNlcnQtbWFueScsXG4gIFNBVkVfVVBTRVJUX01BTllfU1VDQ0VTUyA9ICduZ3J4LWRhdGEvc2F2ZS91cHNlcnQtbWFueS9zdWNjZXNzJyxcbiAgU0FWRV9VUFNFUlRfTUFOWV9FUlJPUiA9ICduZ3J4LWRhdGEvc2F2ZS91cHNlcnQtbWFueS9lcnJvcicsXG5cbiAgLy8gVXNlIG9ubHkgaWYgdGhlIHNlcnZlciBzdXBwb3J0cyB1cHNlcnQ7XG4gIFNBVkVfVVBTRVJUX09ORSA9ICduZ3J4LWRhdGEvc2F2ZS91cHNlcnQtb25lJyxcbiAgU0FWRV9VUFNFUlRfT05FX1NVQ0NFU1MgPSAnbmdyeC1kYXRhL3NhdmUvdXBzZXJ0LW9uZS9zdWNjZXNzJyxcbiAgU0FWRV9VUFNFUlRfT05FX0VSUk9SID0gJ25ncngtZGF0YS9zYXZlL3Vwc2VydC1vbmUvZXJyb3InLFxuXG4gIC8vIENhY2hlIG9wZXJhdGlvbnNcbiAgQUREX0FMTCA9ICduZ3J4LWRhdGEvYWRkLWFsbCcsXG4gIEFERF9NQU5ZID0gJ25ncngtZGF0YS9hZGQtbWFueScsXG4gIEFERF9PTkUgPSAnbmdyeC1kYXRhL2FkZC1vbmUnLFxuICBSRU1PVkVfQUxMID0gJ25ncngtZGF0YS9yZW1vdmUtYWxsJyxcbiAgUkVNT1ZFX01BTlkgPSAnbmdyeC1kYXRhL3JlbW92ZS1tYW55JyxcbiAgUkVNT1ZFX09ORSA9ICduZ3J4LWRhdGEvcmVtb3ZlLW9uZScsXG4gIFVQREFURV9NQU5ZID0gJ25ncngtZGF0YS91cGRhdGUtbWFueScsXG4gIFVQREFURV9PTkUgPSAnbmdyeC1kYXRhL3VwZGF0ZS1vbmUnLFxuICBVUFNFUlRfTUFOWSA9ICduZ3J4LWRhdGEvdXBzZXJ0LW1hbnknLFxuICBVUFNFUlRfT05FID0gJ25ncngtZGF0YS91cHNlcnQtb25lJyxcblxuICBDT01NSVRfQUxMID0gJ25ncngtZGF0YS9jb21taXQtYWxsJyxcbiAgQ09NTUlUX01BTlkgPSAnbmdyeC1kYXRhL2NvbW1pdC1tYW55JyxcbiAgQ09NTUlUX09ORSA9ICduZ3J4LWRhdGEvY29tbWl0LW9uZScsXG4gIFVORE9fQUxMID0gJ25ncngtZGF0YS91bmRvLWFsbCcsXG4gIFVORE9fTUFOWSA9ICduZ3J4LWRhdGEvdW5kby1tYW55JyxcbiAgVU5ET19PTkUgPSAnbmdyeC1kYXRhL3VuZG8tb25lJyxcblxuICBTRVRfQ0hBTkdFX1NUQVRFID0gJ25ncngtZGF0YS9zZXQtY2hhbmdlLXN0YXRlJyxcbiAgU0VUX0NPTExFQ1RJT04gPSAnbmdyeC1kYXRhL3NldC1jb2xsZWN0aW9uJyxcbiAgU0VUX0ZJTFRFUiA9ICduZ3J4LWRhdGEvc2V0LWZpbHRlcicsXG4gIFNFVF9MT0FERUQgPSAnbmdyeC1kYXRhL3NldC1sb2FkZWQnLFxuICBTRVRfTE9BRElORyA9ICduZ3J4LWRhdGEvc2V0LWxvYWRpbmcnXG59XG5cbi8qKiBcIlN1Y2Nlc3NcIiBzdWZmaXggYXBwZW5kZWQgdG8gRW50aXR5T3BzIHRoYXQgYXJlIHN1Y2Nlc3NmdWwuKi9cbmV4cG9ydCBjb25zdCBPUF9TVUNDRVNTID0gJy9zdWNjZXNzJztcblxuLyoqIFwiRXJyb3JcIiBzdWZmaXggYXBwZW5kZWQgdG8gRW50aXR5T3BzIHRoYXQgaGF2ZSBmYWlsZWQuKi9cbmV4cG9ydCBjb25zdCBPUF9FUlJPUiA9ICcvZXJyb3InO1xuXG4vKiogTWFrZSB0aGUgZXJyb3IgRW50aXR5T3AgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gRW50aXR5T3AgKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRXJyb3JPcChvcDogRW50aXR5T3ApOiBFbnRpdHlPcCB7XG4gIHJldHVybiA8RW50aXR5T3A+KG9wICsgT1BfRVJST1IpO1xufVxuXG4vKiogTWFrZSB0aGUgc3VjY2VzcyBFbnRpdHlPcCBjb3JyZXNwb25kaW5nIHRvIHRoZSBnaXZlbiBFbnRpdHlPcCAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1ha2VTdWNjZXNzT3Aob3A6IEVudGl0eU9wKTogRW50aXR5T3Age1xuICByZXR1cm4gPEVudGl0eU9wPihvcCArIE9QX1NVQ0NFU1MpO1xufVxuIl19