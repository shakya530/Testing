/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpResponse error or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
var /**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpResponse error or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
DataServiceError = /** @class */ (function () {
    function DataServiceError(error, requestData) {
        this.error = error;
        this.requestData = requestData;
        this.message = (error.error && error.error.message) || (error.message || (error.body && error.body.error) || error).toString();
    }
    return DataServiceError;
}());
/**
 * Error from a DataService
 * The source error either comes from a failed HTTP response or was thrown within the service.
 * @param error the HttpResponse error or the error thrown by the service
 * @param requestData the HTTP request information such as the method and the url.
 */
export { DataServiceError };
if (false) {
    /** @type {?} */
    DataServiceError.prototype.message;
    /** @type {?} */
    DataServiceError.prototype.error;
    /** @type {?} */
    DataServiceError.prototype.requestData;
}
/**
 * Payload for an EntityAction data service error such as QUERY_ALL_ERROR
 * @record
 */
export function EntityActionDataServiceError() { }
/** @type {?} */
EntityActionDataServiceError.prototype.error;
/** @type {?} */
EntityActionDataServiceError.prototype.originalAction;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1zZXJ2aWNlLWVycm9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1kYXRhLyIsInNvdXJjZXMiOlsiZGF0YXNlcnZpY2VzL2RhdGEtc2VydmljZS1lcnJvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBV0E7Ozs7OztBQUFBO0lBR0UsMEJBQW1CLEtBQVUsRUFBUyxXQUF3QjtRQUEzQyxVQUFLLEdBQUwsS0FBSyxDQUFLO1FBQVMsZ0JBQVcsR0FBWCxXQUFXLENBQWE7UUFDNUQsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDaEk7MkJBaEJIO0lBaUJDLENBQUE7Ozs7Ozs7QUFORCw0QkFNQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVudGl0eUFjdGlvbiB9IGZyb20gJy4uL2FjdGlvbnMvZW50aXR5LWFjdGlvbic7XG5pbXBvcnQgeyBSZXF1ZXN0RGF0YSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5cbi8qKlxuICogRXJyb3IgZnJvbSBhIERhdGFTZXJ2aWNlXG4gKiBUaGUgc291cmNlIGVycm9yIGVpdGhlciBjb21lcyBmcm9tIGEgZmFpbGVkIEhUVFAgcmVzcG9uc2Ugb3Igd2FzIHRocm93biB3aXRoaW4gdGhlIHNlcnZpY2UuXG4gKiBAcGFyYW0gZXJyb3IgdGhlIEh0dHBSZXNwb25zZSBlcnJvciBvciB0aGUgZXJyb3IgdGhyb3duIGJ5IHRoZSBzZXJ2aWNlXG4gKiBAcGFyYW0gcmVxdWVzdERhdGEgdGhlIEhUVFAgcmVxdWVzdCBpbmZvcm1hdGlvbiBzdWNoIGFzIHRoZSBtZXRob2QgYW5kIHRoZSB1cmwuXG4gKi9cbi8vIElmIGV4dGVuZCBmcm9tIEVycm9yLCBgZHNlIGluc3RhbmNlb2YgRGF0YVNlcnZpY2VFcnJvcmAgcmV0dXJucyBmYWxzZVxuLy8gaW4gc29tZSAoYWxsPykgdW5pdCB0ZXN0cyBzbyBkb24ndCBib3RoZXIgdHJ5aW5nLlxuZXhwb3J0IGNsYXNzIERhdGFTZXJ2aWNlRXJyb3Ige1xuICBtZXNzYWdlOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVycm9yOiBhbnksIHB1YmxpYyByZXF1ZXN0RGF0YTogUmVxdWVzdERhdGEpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSAoZXJyb3IuZXJyb3IgJiYgZXJyb3IuZXJyb3IubWVzc2FnZSkgfHwgKGVycm9yLm1lc3NhZ2UgfHwgKGVycm9yLmJvZHkgJiYgZXJyb3IuYm9keS5lcnJvcikgfHwgZXJyb3IpLnRvU3RyaW5nKCk7XG4gIH1cbn1cblxuLyoqIFBheWxvYWQgZm9yIGFuIEVudGl0eUFjdGlvbiBkYXRhIHNlcnZpY2UgZXJyb3Igc3VjaCBhcyBRVUVSWV9BTExfRVJST1IgKi9cbmV4cG9ydCBpbnRlcmZhY2UgRW50aXR5QWN0aW9uRGF0YVNlcnZpY2VFcnJvciB7XG4gIGVycm9yOiBEYXRhU2VydmljZUVycm9yO1xuICBvcmlnaW5hbEFjdGlvbjogRW50aXR5QWN0aW9uO1xufVxuIl19