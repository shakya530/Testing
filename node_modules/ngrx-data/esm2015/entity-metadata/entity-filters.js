/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @typedef {?} */
var EntityFilterFn;
export { EntityFilterFn };
/**
 * Creates an {EntityFilterFn} that matches RegExp or RegExp string pattern
 * anywhere in any of the given props of an entity.
 * If pattern is a string, spaces are significant and ignores case.
 * @template T
 * @param {?=} props
 * @return {?}
 */
export function PropsFilterFnFactory(props = []) {
    if (props.length === 0) {
        // No properties -> nothing could match -> return unfiltered
        return (entities, pattern) => entities;
    }
    return (entities, pattern) => {
        if (!entities) {
            return [];
        }
        /** @type {?} */
        const regExp = typeof pattern === 'string' ? new RegExp(pattern, 'i') : pattern;
        if (regExp) {
            /** @type {?} */
            const predicate = (e) => props.some(prop => regExp.test(e[prop]));
            return entities.filter(predicate);
        }
        return entities;
    };
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWZpbHRlcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWRhdGEvIiwic291cmNlcyI6WyJlbnRpdHktbWV0YWRhdGEvZW50aXR5LWZpbHRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBWUEsTUFBTSwrQkFBd0MsUUFBcUIsRUFBRTtJQUNuRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7O1FBRXZCLE1BQU0sQ0FBQyxDQUFDLFFBQWEsRUFBRSxPQUFlLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQztLQUNyRDtJQUVELE1BQU0sQ0FBQyxDQUFDLFFBQWEsRUFBRSxPQUF3QixFQUFFLEVBQUU7UUFDakQsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQztTQUFFOztRQUU3QixNQUFNLE1BQU0sR0FBRyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2hGLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7O1lBQ1gsTUFBTSxTQUFTLEdBQUcsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdkUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDbkM7UUFDRCxNQUFNLENBQUMsUUFBUSxDQUFDO0tBQ2pCLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogRmlsdGVycyB0aGUgYGVudGl0aWVzYCBhcnJheSBhcmd1bWVudCBhbmQgcmV0dXJucyB0aGUgb3JpZ2luYWwgYGVudGl0aWVzYCxcbiAqIG9yIGEgbmV3IGZpbHRlcmVkIGFycmF5IG9mIGVudGl0aWVzLlxuICogTkVWRVIgbXV0YXRlIHRoZSBvcmlnaW5hbCBgZW50aXRpZXNgIGFycmF5IGl0c2VsZi5cbiAqKi9cbmV4cG9ydCB0eXBlIEVudGl0eUZpbHRlckZuPFQ+ID0gKGVudGl0aWVzOiBUW10sIHBhdHRlcm4/OiBhbnkpID0+IFRbXTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIHtFbnRpdHlGaWx0ZXJGbn0gdGhhdCBtYXRjaGVzIFJlZ0V4cCBvciBSZWdFeHAgc3RyaW5nIHBhdHRlcm5cbiAqIGFueXdoZXJlIGluIGFueSBvZiB0aGUgZ2l2ZW4gcHJvcHMgb2YgYW4gZW50aXR5LlxuICogSWYgcGF0dGVybiBpcyBhIHN0cmluZywgc3BhY2VzIGFyZSBzaWduaWZpY2FudCBhbmQgaWdub3JlcyBjYXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gUHJvcHNGaWx0ZXJGbkZhY3Rvcnk8VCA9IGFueT4ocHJvcHM6IChrZXlvZiBUKVtdID0gW10pOiBFbnRpdHlGaWx0ZXJGbjxUPiB7XG4gIGlmIChwcm9wcy5sZW5ndGggPT09IDApIHtcbiAgICAvLyBObyBwcm9wZXJ0aWVzIC0+IG5vdGhpbmcgY291bGQgbWF0Y2ggLT4gcmV0dXJuIHVuZmlsdGVyZWRcbiAgICByZXR1cm4gKGVudGl0aWVzOiBUW10sIHBhdHRlcm46IHN0cmluZykgPT4gZW50aXRpZXM7XG4gIH1cblxuICByZXR1cm4gKGVudGl0aWVzOiBUW10sIHBhdHRlcm46IHN0cmluZyB8IFJlZ0V4cCkgPT4ge1xuICAgIGlmICghZW50aXRpZXMpIHsgcmV0dXJuIFtdOyB9XG5cbiAgICBjb25zdCByZWdFeHAgPSB0eXBlb2YgcGF0dGVybiA9PT0gJ3N0cmluZycgPyBuZXcgUmVnRXhwKHBhdHRlcm4sICdpJykgOiBwYXR0ZXJuO1xuICAgIGlmIChyZWdFeHApIHtcbiAgICAgIGNvbnN0IHByZWRpY2F0ZSA9IChlOiBhbnkpID0+IHByb3BzLnNvbWUocHJvcCA9PiByZWdFeHAudGVzdChlW3Byb3BdKSk7XG4gICAgICByZXR1cm4gZW50aXRpZXMuZmlsdGVyKHByZWRpY2F0ZSk7XG4gICAgfVxuICAgIHJldHVybiBlbnRpdGllcztcbiAgfTtcbn1cbiJdfQ==